version: '3.3'

services:
  mssql:
    container_name: sql-server
    image: mcr.microsoft.com/mssql/server:2022-latest
    network_mode: host
    restart: always
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "tMIxN11yGZgMC"
  setup_mssql:
    image: mcr.microsoft.com/mssql-tools
    network_mode: host
    depends_on:
      - mssql
    restart: "no"
    volumes:
      - ./:/app
    entrypoint:
      - "bash"
      - "-c"
      - |
        while ! /opt/mssql-tools/bin/sqlcmd -S localhost,1433 -U sa -P tMIxN11yGZgMC -Q "SELECT 1"; do
          sleep 1
        done
        /opt/mssql-tools/bin/sqlcmd -S localhost,1433 -U sa -P tMIxN11yGZgMC -i /app/unit-tests.sql
  minio:
    container_name: minio
    hostname: minio-e2e
    image: quay.io/minio/minio
    network_mode: host
    restart: always
    command:
      - server
      - /data
      - "--console-address"
      - ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9001" ]
      interval: 30s
      timeout: 10s
      retries: 5
  prepare_buckets:
    container_name: minio-setup
    image: quay.io/minio/minio
    network_mode: host
    depends_on:
      minio:
        condition: service_healthy
    entrypoint:
      - "/bin/sh"
      - "-c"
      - |
        mc alias set e2e "http://localhost:9000" minioadmin minioadmin
        mc admin info e2e
        mc mb e2e/tmp && mc mb e2e/lakehouse
  # https://github.com/databricks/docker-spark-iceberg/blob/main/docker-compose.yml
  lakekeeper:
    image: quay.io/lakekeeper/catalog:latest-main
    network_mode: host
    environment:
      #      - LAKEKEEPER__PG_ENCRYPTION_KEY=This-is-NOT-Secure!
      - LAKEKEEPER__LISTEN_PORT=20001
      - LAKEKEEPER__METRICS_PORT=20002
      - LAKEKEEPER__BASE_URI=http://localhost:20001
      - ICEBERG_REST__BASE_URI=http://localhost:20001
      - LAKEKEEPER__PG_DATABASE_URL_READ=postgresql://postgres:postgres@localhost:5432/postgres
      - LAKEKEEPER__PG_DATABASE_URL_WRITE=postgresql://postgres:postgres@localhost:5432/postgres
      - RUST_LOG=trace,axum=trace,sqlx=trace,iceberg-catalog=trace
    command: [ "serve" ]
    healthcheck:
      test: [ "CMD", "/home/nonroot/iceberg-catalog", "healthcheck" ]
      interval: 1s
      timeout: 10s
      retries: 30
    depends_on:
      lakekeeper_migrate:
        condition: service_completed_successfully
      lakekeeper_db:
        condition: service_healthy
      minio:
        condition: service_healthy
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    restart: always
    network_mode: host
    command:
      - azurite-blob
      - "--blobHost"
      - "localhost"
      - "--blobPort"
      - "10001"
  create-cdm-container:
    image: python:3.11-slim-bookworm
    network_mode: host
    depends_on:
      - azurite
    volumes:
      - ./populate-cdm-container.py:/populate-cdm-container.py
    command: [ "/bin/sh", "-c", "pip install azure-storage-blob==12.24.1 requests && python /populate-cdm-container.py" ]
  lakekeeper_migrate:
    image: quay.io/lakekeeper/catalog:latest-main
    network_mode: host
    environment:
      #      - LAKEKEEPER__PG_ENCRYPTION_KEY=This-is-NOT-Secure!
      - LAKEKEEPER__PG_DATABASE_URL_READ=postgresql://postgres:postgres@localhost:5432/postgres
      - LAKEKEEPER__PG_DATABASE_URL_WRITE=postgresql://postgres:postgres@localhost:5432/postgres
      - RUST_LOG=info
    restart: "no"
    command: [ "migrate" ]
    depends_on:
      lakekeeper_db:
        condition: service_healthy
  lakekeeper_prepare:
    image: python:3.11-slim-bookworm
    network_mode: host
    environment:
      CATALOG_HOST: localhost
      CATALOG_WAREHOUSE: demo
    depends_on:
      lakekeeper:
        condition: service_healthy
    restart: "no"
    volumes:
      - ./bootstrap-lk.py:/bootstrap-lk.py
    command: [ "/bin/sh", "-c", "pip install requests && python /bootstrap-lk.py"  ]
  lakekeeper_db:
    image: bitnami/postgresql:16.3.0
    network_mode: host
    restart: always
    environment:
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=postgres
      - POSTGRESQL_DATABASE=postgres
      - PGHOST=localhost
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -p 5432 -d postgres" ]
      interval: 2s
      timeout: 30s
      retries: 8
  trino:
    depends_on:
      lakekeeper:
        condition: service_healthy
    network_mode: host
    image: "trinodb/trino:474"
    volumes:
      - ./unit-tests.properties:/etc/trino/catalog/iceberg.properties
